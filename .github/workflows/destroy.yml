name: Destroy All Infrastructure

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Clean S3 Buckets
        run: |
          echo "Emptying S3 buckets..."
          BUCKETS=$(aws s3api list-buckets --query 'Buckets[?starts_with(Name, `recipe-storage-`)].Name' --output text)
          for BUCKET in $BUCKETS; do
            echo "Emptying bucket: $BUCKET"
            aws s3 rm s3://$BUCKET --recursive
          done

      - name: Delete CloudWatch Resources
        run: |
          echo "Deleting CloudWatch Log Groups..."
          LOG_GROUPS=$(aws logs describe-log-groups --query 'logGroups[?starts_with(logGroupName, `/aws/lambda/recipe_processor`)].logGroupName' --output text)
          for LOG_GROUP in $LOG_GROUPS; do
            echo "Deleting log group: $LOG_GROUP"
            aws logs delete-log-group --log-group-name "$LOG_GROUP"
          done

          echo "Deleting CloudWatch Alarms..."
          ALARMS=$(aws cloudwatch describe-alarms --query 'MetricAlarms[?starts_with(AlarmName, `recipe-processor`)].AlarmName' --output text)
          for ALARM in $ALARMS; do
            echo "Deleting alarm: $ALARM"
            aws cloudwatch delete-alarms --alarm-names "$ALARM"
          done

      - name: Delete SNS Topics
        run: |
          echo "Deleting SNS Topics..."
          TOPICS=$(aws sns list-topics --query 'Topics[?contains(TopicArn, `recipe-processor`)].TopicArn' --output text)
          for TOPIC in $TOPICS; do
            echo "Deleting topic: $TOPIC"
            aws sns delete-topic --topic-arn "$TOPIC"
          done

      - name: Delete Lambda Functions
        run: |
          echo "Deleting Lambda Functions..."
          FUNCTIONS=$(aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `recipe_processor`)].FunctionName' --output text)
          for FUNC in $FUNCTIONS; do
            echo "Deleting function: $FUNC"
            aws lambda delete-function --function-name "$FUNC"
          done

      - name: Delete IAM Roles and Policies
        run: |
          echo "Cleaning up IAM resources..."
          
          # List and detach policies from roles
          ROLES=$(aws iam list-roles --query 'Roles[?starts_with(RoleName, `recipe_processor`)].RoleName' --output text)
          for ROLE in $ROLES; do
            echo "Processing role: $ROLE"
            
            # Detach managed policies
            POLICIES=$(aws iam list-attached-role-policies --role-name "$ROLE" --query 'AttachedPolicies[*].PolicyArn' --output text)
            for POLICY in $POLICIES; do
              echo "Detaching policy: $POLICY from role: $ROLE"
              aws iam detach-role-policy --role-name "$ROLE" --policy-arn "$POLICY"
            done
            
            # Delete inline policies
            INLINE_POLICIES=$(aws iam list-role-policies --role-name "$ROLE" --query 'PolicyNames' --output text)
            for POLICY in $INLINE_POLICIES; do
              echo "Deleting inline policy: $POLICY from role: $ROLE"
              aws iam delete-role-policy --role-name "$ROLE" --policy-name "$POLICY"
            done
            
            # Delete role
            echo "Deleting role: $ROLE"
            aws iam delete-role --role-name "$ROLE"
          done

      - name: Delete Security Groups
        run: |
          echo "Deleting Security Groups..."
          GROUPS=$(aws ec2 describe-security-groups --query 'SecurityGroups[?starts_with(GroupName, `recipe-processor`)].GroupId' --output text)
          for GROUP in $GROUPS; do
            echo "Deleting security group: $GROUP"
            aws ec2 delete-security-group --group-id "$GROUP"
          done

      - name: Run Terraform Destroy
        run: |
          cd terraform/environments/dev
          terraform init
          terraform destroy -auto-approve

      - name: Verify Cleanup
        run: |
          echo "Verifying all resources are cleaned up..."
          
          # Check S3
          REMAINING_BUCKETS=$(aws s3api list-buckets --query 'Buckets[?starts_with(Name, `recipe-storage-`)].Name' --output text)
          if [ ! -z "$REMAINING_BUCKETS" ]; then
            echo "Warning: Found remaining S3 buckets: $REMAINING_BUCKETS"
          fi
          
          # Check Lambda
          REMAINING_FUNCTIONS=$(aws lambda list-functions --query 'Functions[?starts_with(FunctionName, `recipe_processor`)].FunctionName' --output text)
          if [ ! -z "$REMAINING_FUNCTIONS" ]; then
            echo "Warning: Found remaining Lambda functions: $REMAINING_FUNCTIONS"
          fi
          
          # Check CloudWatch
          REMAINING_LOG_GROUPS=$(aws logs describe-log-groups --query 'logGroups[?starts_with(logGroupName, `/aws/lambda/recipe_processor`)].logGroupName' --output text)
          if [ ! -z "$REMAINING_LOG_GROUPS" ]; then
            echo "Warning: Found remaining Log Groups: $REMAINING_LOG_GROUPS"
          fi
          
          echo "Cleanup complete!"