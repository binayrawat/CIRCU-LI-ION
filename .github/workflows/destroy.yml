name: Destroy Infrastructure

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: |
          cd terraform/environments/dev
          terraform init

      - name: Check All Resources
        id: check-resources
        run: |
          echo "Checking CloudFront distributions..."
          DIST_COUNT=$(aws cloudfront list-distributions --query 'length(DistributionList.Items)' --output text || echo "0")
          if [ "$DIST_COUNT" = "0" ]; then
            echo "✅ No CloudFront distributions found"
          else
            DIST_IDS=$(aws cloudfront list-distributions --query 'DistributionList.Items[*].Id' --output text)
            echo "Found distributions: $DIST_IDS"
            echo "DIST_IDS=$DIST_IDS" >> $GITHUB_ENV
          fi
          
          echo "Checking Origin Access Identities..."
          OAI_COUNT=$(aws cloudfront list-cloud-front-origin-access-identities --query 'length(CloudFrontOriginAccessIdentityList.Items)' --output text || echo "0")
          if [ "$OAI_COUNT" = "0" ]; then
            echo "✅ No Origin Access Identities found"
          else
            OAI_IDS=$(aws cloudfront list-cloud-front-origin-access-identities --query 'CloudFrontOriginAccessIdentityList.Items[*].Id' --output text)
            echo "Found OAIs: $OAI_IDS"
            echo "OAI_IDS=$OAI_IDS" >> $GITHUB_ENV
          fi
          
          echo "Checking Lambda functions..."
          if aws lambda get-function --function-name recipe_processor_dev 2>/dev/null; then
            echo "Found Lambda function: recipe_processor_dev"
            echo "LAMBDA_EXISTS=true" >> $GITHUB_ENV
          else
            echo "✅ No Lambda function found"
          fi
          
          echo "Checking S3 buckets..."
          if aws s3api head-bucket --bucket recipe-storage-dev 2>/dev/null; then
            echo "Found S3 bucket: recipe-storage-dev"
            echo "BUCKET_EXISTS=true" >> $GITHUB_ENV
          else
            echo "✅ No S3 bucket found"
          fi

      - name: Disable CloudFront Distributions
        if: env.DIST_IDS != ''
        run: |
          for DIST_ID in $DIST_IDS; do
            echo "Working on distribution $DIST_ID"
            DIST_CONFIG=$(aws cloudfront get-distribution-config --id $DIST_ID)
            ETAG=$(echo "$DIST_CONFIG" | jq -r '.ETag')
            echo "$DIST_CONFIG" | jq '.DistributionConfig.Enabled = false | .DistributionConfig' > config.json
            aws cloudfront update-distribution \
              --id $DIST_ID \
              --distribution-config file://config.json \
              --if-match "$ETAG" || echo "Failed to disable $DIST_ID"
          done

      - name: Wait for Distributions
        if: env.DIST_IDS != ''
        run: |
          for DIST_ID in $DIST_IDS; do
            echo "Waiting for distribution $DIST_ID to be deployed..."
            while true; do
              STATUS=$(aws cloudfront get-distribution --id $DIST_ID --query 'Distribution.Status' --output text)
              echo "Current status of $DIST_ID: $STATUS"
              if [ "$STATUS" = "Deployed" ]; then
                break
              fi
              sleep 30
            done
          done

      - name: Delete CloudFront Distributions
        if: env.DIST_IDS != ''
        run: |
          for DIST_ID in $DIST_IDS; do
            echo "Deleting distribution $DIST_ID"
            ETAG=$(aws cloudfront get-distribution --id $DIST_ID --query 'Distribution.ETag' --output text)
            aws cloudfront delete-distribution \
              --id $DIST_ID \
              --if-match "$ETAG" || echo "Failed to delete $DIST_ID"
          done

      - name: Delete Origin Access Identities
        if: env.OAI_IDS != ''
        run: |
          for OAI_ID in $OAI_IDS; do
            echo "Deleting OAI $OAI_ID"
            ETAG=$(aws cloudfront get-cloud-front-origin-access-identity --id $OAI_ID --query 'ETag' --output text)
            aws cloudfront delete-cloud-front-origin-access-identity \
              --id $OAI_ID \
              --if-match "$ETAG" || echo "Failed to delete OAI $OAI_ID"
          done

      - name: Clean Up Lambda
        if: env.LAMBDA_EXISTS == 'true'
        run: |
          echo "Deleting Lambda function..."
          aws lambda delete-function --function-name recipe_processor_dev

      - name: Clean Up S3
        if: env.BUCKET_EXISTS == 'true'
        run: |
          echo "Emptying and deleting S3 bucket..."
          aws s3 rm s3://recipe-storage-dev --recursive
          aws s3api delete-bucket --bucket recipe-storage-dev

      - name: Final Verification
        run: |
          echo "=== Final Resource Check ==="
          
          echo "CloudFront distributions:"
          if [ "$(aws cloudfront list-distributions --query 'length(DistributionList.Items)' --output text)" = "0" ]; then
            echo "✅ No distributions remain"
          fi
          
          echo "Origin Access Identities:"
          if [ "$(aws cloudfront list-cloud-front-origin-access-identities --query 'length(CloudFrontOriginAccessIdentityList.Items)' --output text)" = "0" ]; then
            echo "✅ No OAIs remain"
          fi
          
          echo "Lambda functions:"
          if ! aws lambda get-function --function-name recipe_processor_dev 2>/dev/null; then
            echo "✅ No Lambda function remains"
          fi
          
          echo "S3 buckets:"
          if ! aws s3api head-bucket --bucket recipe-storage-dev 2>/dev/null; then
            echo "✅ No S3 bucket remains"
          fi