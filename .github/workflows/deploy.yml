name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'terraform/**'
      - '.github/workflows/**'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: recipe-processor-${{ github.event.inputs.environment || 'dev' }}
  TF_VERSION: 1.0.0
  PYTHON_VERSION: 3.9

jobs:
  build-and-push:
    name: 'Build and Push ECR Image'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.paths, 'src/processor/')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd src/processor
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  test:
    name: 'Test & Validate'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-test.txt
          pip install -r src/processor/requirements.txt
          pip install -e .
      
      - name: Run Tests
        run: |
          pytest tests/ --cov=src/processor --cov-report=xml
          flake8 src/processor/

  deploy:
    name: 'Deploy Infrastructure'
    needs: test
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: ./terraform

    env:
      AWS_REGION: us-west-2
      BASE_REPOSITORY: recipe-processor-dev

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify AWS Authentication
        run: |
          echo "Verifying AWS credentials..."
          aws sts get-caller-identity
          
          # List existing ECR repositories
          echo "Listing existing ECR repositories..."
          aws ecr describe-repositories || true

      - name: Create ECR Repository if not exists
        run: |
          # Check if repository exists
          if ! aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} 2>/dev/null; then
            echo "Creating ECR repository ${{ env.ECR_REPOSITORY }}"
            aws ecr create-repository \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-scanning-configuration scanOnPush=true \
              --encryption-configuration encryptionType=AES256
          else
            echo "Repository ${{ env.ECR_REPOSITORY }} already exists"
          fi

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get AWS Account ID
        id: get-aws-account
        run: |
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "account_id=$AWS_ACCOUNT_ID" >> $GITHUB_OUTPUT
          echo "ECR_REGISTRY=$AWS_ACCOUNT_ID.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com" >> $GITHUB_ENV

      - name: Get ECR Repository Name
        id: get-ecr
        run: |
          # Get the full repository name from Terraform output
          REPO_NAME=$(terraform -chdir=terraform output -raw ecr_repository_name || echo "")
          if [ -z "$REPO_NAME" ]; then
            echo "Failed to get ECR repository name from Terraform"
            exit 1
          fi
          echo "ECR_REPOSITORY=$REPO_NAME" >> $GITHUB_ENV
          echo "repository=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "Found ECR repository: $REPO_NAME"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: ./src/processor
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify Image Push
        run: |
          echo "Verifying pushed images..."
          aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY }} \
            --query 'imageDetails[*].imageTags[*]' \
            --output text || echo "Failed to verify images"

  container:
    name: 'Build & Deploy Container'
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} ./src/processor
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 