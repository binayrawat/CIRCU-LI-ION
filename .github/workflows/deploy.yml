name: Deploy Infrastructure

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'terraform/**'
      - '.github/workflows/**'
      - 'tests/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - prod
        default: 'dev'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: recipe-processor-${{ github.event.inputs.environment || 'dev' }}
  TF_VERSION: 1.0.0
  PYTHON_VERSION: 3.9

jobs:
  build-and-push:
    name: 'Build and Push ECR Image'
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.event.paths, 'src/processor/')
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          cd src/processor
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  test:
    name: 'Test & Validate'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements-test.txt
          pip install -r src/processor/requirements.txt
          pip install -e .
      
      - name: Run Tests
        run: |
          pytest tests/ --cov=src/processor --cov-report=xml
          flake8 src/processor/

  deploy:
    name: 'Deploy Infrastructure'
    needs: test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./terraform

    steps:
      - uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check and Store Existing Resources
        id: check-resources
        run: |
          # Check CloudFront
          CF_DIST=$(aws cloudfront list-distributions --query "DistributionList.Items[?contains(Comment, 'Recipe CDN')].{Id:Id,Domain:DomainName}" --output json | jq -r '.[0].Id')
          if [ "$CF_DIST" != "null" ] && [ ! -z "$CF_DIST" ]; then
            echo "Found CloudFront distribution: $CF_DIST"
            echo "cloudfront_id=$CF_DIST" >> $GITHUB_OUTPUT
            # Create a tfvars file to override CloudFront creation
            echo "create_cloudfront = false" > override.tfvars
          fi

          # Check ECR
          ECR_REPO=$(aws ecr describe-repositories --query "repositories[?contains(repositoryName, 'recipe-processor-dev')].repositoryName" --output text)
          if [ ! -z "$ECR_REPO" ]; then
            echo "Found ECR repository: $ECR_REPO"
            echo "ECR_REPOSITORY=$ECR_REPO" >> $GITHUB_ENV
            echo "ecr_repository=$ECR_REPO" >> $GITHUB_OUTPUT
            # Add to tfvars
            echo "create_ecr = false" >> override.tfvars
          fi

      - name: Terraform Init
        run: terraform init

      - name: Import Existing Resources
        run: |
          # Import core resources
          terraform import aws_batch_compute_environment.compute recipe-compute-dev || true
          terraform import aws_batch_job_queue.processing_queue recipe-processing-queue-dev || true
          terraform import aws_s3_bucket.recipe_storage circu-li-ion-dev || true
          terraform import aws_iam_role.batch_service_role recipe-batch-service-dev || true
          terraform import aws_iam_role.task_role recipe-task-role-dev || true
          
          # Import CloudFront if exists
          if [ ! -z "${{ steps.check-resources.outputs.cloudfront_id }}" ]; then
            terraform import aws_cloudfront_distribution.recipe_cdn ${{ steps.check-resources.outputs.cloudfront_id }} || true
          fi
          
          # Import ECR if exists
          if [ ! -z "${{ steps.check-resources.outputs.ecr_repository }}" ]; then
            terraform import aws_ecr_repository.processor ${{ steps.check-resources.outputs.ecr_repository }} || true
          fi

      - name: Terraform Plan
        id: plan
        run: |
          # Use override variables if they exist
          if [ -f "override.tfvars" ]; then
            terraform plan -var-file="override.tfvars" -out=tfplan
          else
            terraform plan -out=tfplan
          fi

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        run: |
          if [ -f "override.tfvars" ]; then
            terraform apply -var-file="override.tfvars" -auto-approve tfplan
          else
            terraform apply -auto-approve tfplan
          fi

      - name: Create ECR Repository if Needed
        if: github.ref == 'refs/heads/main' && !steps.check-resources.outputs.ecr_repository
        run: |
          REPO_URL=$(terraform output -raw ecr_repository_url || echo "")
          if [ ! -z "$REPO_URL" ]; then
            REPO_NAME=$(echo "$REPO_URL" | awk -F'/' '{print $NF}')
            aws ecr create-repository --repository-name $REPO_NAME --image-scanning-configuration scanOnPush=true || true
            echo "ECR_REPOSITORY=$REPO_NAME" >> $GITHUB_ENV
          fi

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main' && env.ECR_REPOSITORY != ''
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd $GITHUB_WORKSPACE/src/processor
          echo "Building for repository: ${{ env.ECR_REPOSITORY }}"
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest

      - name: Cleanup
        if: always()
        run: rm -f tfplan override.tfvars || true

  container:
    name: 'Build & Deploy Container'
    needs: deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} ./src/processor
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest 