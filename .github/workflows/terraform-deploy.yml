name: Terraform Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-west-2
  PROJECT_NAME: recipe-automation
  ENVIRONMENT: dev
  TF_STATE_BUCKET: terraform-state-recipe-automation-dev

permissions:
  id-token: write
  contents: read

jobs:
  deploy-state-backend:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create State Backend
        run: |
          # Create S3 bucket if it doesn't exist
          if ! aws s3 ls "s3://${TF_STATE_BUCKET}" 2>&1 > /dev/null; then
            aws s3api create-bucket \
              --bucket ${TF_STATE_BUCKET} \
              --region ${AWS_REGION} \
              --create-bucket-configuration LocationConstraint=${AWS_REGION}
            
            aws s3api put-bucket-versioning \
              --bucket ${TF_STATE_BUCKET} \
              --versioning-configuration Status=Enabled
          fi
          
          # Create DynamoDB table if it doesn't exist
          if ! aws dynamodb describe-table --table-name terraform-locks-${PROJECT_NAME}-${ENVIRONMENT} 2>&1 > /dev/null; then
            aws dynamodb create-table \
              --table-name terraform-locks-${PROJECT_NAME}-${ENVIRONMENT} \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
          fi

  deploy-infrastructure:
    needs: deploy-state-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Create Backend Config
        working-directory: recipe-automation/terraform/environments/dev
        run: |
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket         = "${TF_STATE_BUCKET}"
              key            = "terraform.tfstate"
              region        = "${AWS_REGION}"
              encrypt       = true
              dynamodb_table = "terraform-locks-${PROJECT_NAME}-${ENVIRONMENT}"
            }
          }
          EOF

      - name: Terraform Init
        working-directory: recipe-automation/terraform/environments/dev
        run: terraform init

      - name: Terraform Plan
        working-directory: recipe-automation/terraform/environments/dev
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: recipe-automation/terraform/environments/dev
        run: terraform apply -auto-approve tfplan

      - name: Update Lambda Configurations
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Update Lambda configurations
          for func in split-file process-chunk merge-results; do
            memory_size=1024
            timeout=300
            
            if [ "$func" = "merge-results" ]; then
              memory_size=3008
              timeout=900
            fi
            
            aws lambda update-function-configuration \
              --function-name ${PROJECT_NAME}-${ENVIRONMENT}-${func} \
              --memory-size ${memory_size} \
              --timeout ${timeout}
          done

      - name: Update Lambda Code
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Update split-file Lambda
          cd recipe-automation/terraform/modules/lambda/functions/split_file/src
          zip -j split_file.zip index.py
          aws lambda update-function-code \
            --function-name ${PROJECT_NAME}-${ENVIRONMENT}-split-file \
            --zip-file fileb://split_file.zip

          # Update process-chunk Lambda
          cd ../../process_chunk/src
          zip -j process_chunk.zip index.py
          aws lambda update-function-code \
            --function-name ${PROJECT_NAME}-${ENVIRONMENT}-process-chunk \
            --zip-file fileb://process_chunk.zip

          # Update merge-results Lambda
          cd ../../merge_results/src
          zip -j merge_results.zip index.py
          aws lambda update-function-code \
            --function-name ${PROJECT_NAME}-${ENVIRONMENT}-merge-results \
            --zip-file fileb://merge_results.zip 