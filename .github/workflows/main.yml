name: CIRCU-LI-ION Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (deploy/destroy)'
        required: true
        default: 'deploy'

env:
  AWS_REGION: us-west-2
  ECR_REPOSITORY: recipe-processor-dev
  TF_VERSION: 1.0.0

jobs:
  test:
    name: 'Test & Validate'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov flake8
          pip install -r src/processor/requirements.txt
      
      - name: Run Tests
        run: |
          pytest tests/ --cov=src/processor --cov-report=xml
          flake8 src/processor/

  infrastructure:
    name: 'Infrastructure Management'
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init
      
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          if [[ "${{ github.event.inputs.action }}" == "destroy" ]]; then
            terraform plan -destroy -out=tfplan
          else
            terraform plan -out=tfplan
          fi
      
      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan

  container:
    name: 'Container Build & Deploy'
    needs: infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and Push
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} ./src/processor
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }} $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  notify:
    name: 'Notification'
    needs: [test, infrastructure, container]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check Pipeline Status
        run: |
          if [[ "${{ needs.test.result }}" == "success" ]] && \
             [[ "${{ needs.infrastructure.result }}" == "success" ]] && \
             [[ "${{ needs.container.result }}" == "success" ]]; then
            echo "Pipeline completed successfully!"
            exit 0
          else
            echo "Pipeline failed!"
            exit 1
          fi 